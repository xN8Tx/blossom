{"version":3,"file":"Message.stories-85313227.js","sources":["../../src/modules/chat/pages/chat/components/wrapper/message/body/Body.tsx","../../src/modules/chat/hooks/useOnScreen.ts","../../src/modules/chat/pages/chat/components/wrapper/message/image/Image.tsx","../../src/modules/chat/pages/chat/components/wrapper/message/info/Info.tsx","../../src/modules/chat/pages/chat/components/wrapper/message/wrapper/Wrapper.tsx","../../src/modules/chat/pages/chat/components/wrapper/message/time/Time.tsx","../../src/modules/chat/pages/chat/components/wrapper/message/Message.tsx"],"sourcesContent":["import Paragraph from '@/ui/paragraphs/Paragraph';\n\nimport sendedIcon from '@chat/assets/SendedIcon.svg';\nimport readIcon from '@chat/assets/ReadIcon.svg';\n\nimport style from '../Message.module.scss';\n\ntype BodyProps = {\n  message: string;\n  isUser: boolean;\n  status: boolean | 'loading';\n};\n\nexport default function Body({ message, isUser, status }: BodyProps) {\n  const statusUrl = status ? readIcon : sendedIcon;\n\n  return (\n    <div className={style.body}>\n      <Paragraph size='x' color='user'>\n        {message}\n      </Paragraph>\n      {isUser && <img src={statusUrl} />}\n    </div>\n  );\n}\n","import { RefObject, useEffect, useState } from 'react';\n\nconst useOnScreen = (ref: RefObject<unknown>, rootMargin = '0px') => {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIntersecting(entry.isIntersecting);\n      },\n      {\n        rootMargin,\n      }\n    );\n    if (ref.current) {\n      observer.observe(ref.current as Element);\n    }\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      if (ref.current) observer.unobserve(ref.current as Element);\n    };\n  }, [ref, rootMargin]);\n\n  return isIntersecting;\n};\n\nexport default useOnScreen;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\n\nimport useOnScreen from '@chat/hooks/useOnScreen';\n\nimport style from '../Message.module.scss';\n\ntype ImageProps = {\n  message: string;\n};\n\nexport default function Image({ message }: ImageProps) {\n  const ref = useRef<HTMLImageElement>(null);\n  const isOnScreen = useOnScreen(ref);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (!isOnScreen) return () => {};\n    if (!ref.current) return () => {};\n    if (\n      ref.current.src !==\n      `${import.meta.env.VITE_FRONTEND_SERVER_URL}chat/${id}`\n    )\n      return () => {};\n\n    let isLive = false;\n    let interval;\n    const liveHandler = () => {\n      isLive = true;\n    };\n\n    const setImage = new Promise((resolve) => {\n      document.addEventListener('mousemove', liveHandler);\n      document.addEventListener('scroll', liveHandler);\n\n      interval = setInterval(() => {\n        if (isLive) return resolve((ref.current!.src = message));\n      }, 300);\n    });\n\n    setImage.then(() => {\n      document.removeEventListener('mousemove', liveHandler);\n      document.removeEventListener('scroll', liveHandler);\n      setIsLoaded(true);\n      clearInterval(interval!);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, isOnScreen]);\n\n  return (\n    <div\n      className={style.imageWrapper}\n      is-loaded={isLoaded.toString()}\n      is-image\n    >\n      <img src='' className={style.image} ref={ref} />\n    </div>\n  );\n}\n","import { useTranslation } from 'react-i18next';\n\nimport Paragraph from '@/ui/paragraphs/Paragraph';\n\nimport style from '../Message.module.scss';\n\nexport default function Info() {\n  const { t } = useTranslation();\n\n  return (\n    <div className={style.info}>\n      <Paragraph size='xs' color='message'>\n        {t('chat.edited')}\n      </Paragraph>\n    </div>\n  );\n}\n","import isMessageImage from '@chat/utils/isMessageImage';\n\nimport Body from '../body/Body';\nimport Image from '../image/Image';\nimport Info from '../info/Info';\n\nimport style from '../Message.module.scss';\n\ntype WrapperProps = {\n  isDate: boolean;\n  isUser: boolean;\n  isEdit: boolean;\n  status: boolean | 'loading';\n  message: string;\n};\n\nexport default function Wrapper({\n  isDate,\n  isEdit,\n  isUser,\n  status,\n  message,\n}: WrapperProps) {\n  const isImage = isMessageImage(message);\n\n  if (isImage) {\n    return <Image message={message} />;\n  }\n\n  return (\n    <div className={style.wrapper} is-date={isDate.toString()}>\n      <Body message={message} isUser={isUser} status={status} />\n      {isEdit && <Info />}\n    </div>\n  );\n}\n","import Paragraph from '@/ui/paragraphs/Paragraph';\n\nimport timeHandler from '@/modules/chat/utils/fromDateToTime';\n\nimport style from '../Message.module.scss';\n\ntype TimeProps = {\n  date: string;\n};\n\nexport default function Time({ date }: TimeProps) {\n  const time = timeHandler(date);\n\n  return (\n    <div className={style.time}>\n      <Paragraph size='xs' color='message'>\n        {time}\n      </Paragraph>\n    </div>\n  );\n}\n","import { memo } from 'react';\n\nimport Wrapper from './wrapper/Wrapper';\nimport Time from './time/Time';\n\nimport type { Messages } from '@/models/data';\n\nimport style from './Message.module.scss';\n\ntype MessageProps = {\n  isDate: boolean;\n  isUser: boolean;\n  messageObj: Messages;\n};\n\nconst Message = memo(({ isDate, isUser, messageObj }: MessageProps) => {\n  const { id, message, date, status, isEdit } = messageObj;\n\n  return (\n    <div\n      className={style.container}\n      is-user={isUser.toString()}\n      data-id={id.toString()}\n      is-active='false'\n    >\n      {isDate && <Time date={date} />}\n      <Wrapper\n        isDate={isDate}\n        isEdit={isEdit}\n        isUser={isUser}\n        status={status}\n        message={message}\n      />\n    </div>\n  );\n});\n\nexport default Message;\n"],"names":["Body","message","isUser","status","statusUrl","readIcon","sendedIcon","jsxs","style","jsx","Paragraph","useOnScreen","ref","rootMargin","isIntersecting","setIntersecting","useState","useEffect","observer","entry","Image","useRef","isOnScreen","isLoaded","setIsLoaded","id","useParams","isLive","interval","liveHandler","resolve","Info","t","useTranslation","Wrapper","isDate","isEdit","isMessageImage","Time","date","time","timeHandler","Message","memo","messageObj"],"mappings":"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"}