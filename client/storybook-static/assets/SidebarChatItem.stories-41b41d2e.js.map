{"version":3,"file":"SidebarChatItem.stories-41b41d2e.js","sources":["../../src/modules/chat/components/sidebar/chat-item/text/Text.tsx","../../src/modules/chat/components/sidebar/chat-item/ChatItem.tsx"],"sourcesContent":["import Paragraph from '@/ui/paragraphs/Paragraph';\nimport { useTranslation } from 'react-i18next';\n\nimport { useAppSelector } from '@/store';\n\nimport isMessageImage from '@chat/utils/isMessageImage';\n\nimport ReadIcon from '@chat/assets/ReadIcon.svg';\nimport SendedIcon from '@chat/assets/SendedIcon.svg';\n\nimport type { Messages } from '@/models/data';\n\nimport style from './Text.module.scss';\n\ntype TextProps = {\n  messages: Messages[];\n  notification: number;\n};\n\nexport default function Text({ messages, notification }: TextProps) {\n  const { t } = useTranslation();\n  const userId = useAppSelector((state) => state.user.data.id);\n\n  if (messages.length === 0) {\n    return <></>;\n  }\n\n  const lastMessage = messages[messages.length - 1];\n  const isImage = isMessageImage(lastMessage.message);\n\n  let messageText: string = lastMessage.message;\n  if (!isImage && lastMessage.message.length > 27) {\n    const newMess = lastMessage.message.slice(0, 25);\n    messageText = newMess + '...';\n  }\n\n  const isUserMessage = Number(userId) === Number(lastMessage.userId);\n  const isCompanionRead = !isUserMessage && Number(notification) > 0;\n\n  const isUserMessageRead = isUserMessage && lastMessage.status === true;\n  const isUserMessageSend = isUserMessage && lastMessage.status === false;\n\n  return (\n    <div className={style.text}>\n      <Paragraph size='m' color='message'>\n        {isImage ? <b>{t('chat.image')}</b> : messageText}\n      </Paragraph>\n      {isCompanionRead && (\n        <div className={style.icon}>\n          <Paragraph size='s' color='user'>\n            {notification}\n          </Paragraph>\n        </div>\n      )}\n      {isUserMessageRead && <img src={ReadIcon} alt='' />}\n      {isUserMessageSend && <img src={SendedIcon} alt='' />}\n    </div>\n  );\n}\n","import { Link } from 'react-router-dom';\n\nimport timeHandler from '@/modules/chat/utils/fromDateToTime';\n\nimport Avatar from '@/components/avatar/Avatar';\nimport Heading from '@/ui/headings/Heading';\nimport Paragraph from '@/ui/paragraphs/Paragraph';\nimport Text from './text/Text';\n\nimport type { Messages, User } from '@/models/data';\n\nimport style from './ChatItem.module.scss';\n\ntype ChatItemProps = {\n  chatId: number;\n  title: string;\n  avatar: string | null;\n  notification: number;\n  user: User;\n  messages: Messages[];\n};\n\nexport default function ChatItem({\n  chatId,\n  title,\n  avatar,\n  user,\n  messages,\n  notification,\n}: ChatItemProps) {\n  const linkToChat = `/chat/${chatId}`;\n\n  const chatAvatar = avatar !== null ? avatar : user.avatar;\n  const name =\n    title.length !== 0 ? title : `${user.firstName} ${user.lastName}`;\n\n  const isMessages = messages.length > 0;\n  const lastMessage = isMessages && messages[messages.length - 1];\n  const time = isMessages && timeHandler((lastMessage as Messages).date);\n\n  return (\n    <Link to={linkToChat} className={style.wrapper}>\n      <Avatar\n        isLink={false}\n        avatar={chatAvatar}\n        firstName={name}\n        size='s'\n        status={user.status}\n      />\n      <div className={style.body}>\n        <div className={style.title}>\n          <Heading size='s'>{name}</Heading>\n          {isMessages && (\n            <Paragraph size='s' color='message'>\n              {time}\n            </Paragraph>\n          )}\n        </div>\n        <Text messages={messages} notification={notification} />\n      </div>\n    </Link>\n  );\n}\n"],"names":["Text","messages","notification","t","useTranslation","userId","useAppSelector","state","jsx","Fragment","lastMessage","isImage","isMessageImage","messageText","isUserMessage","isCompanionRead","isUserMessageRead","isUserMessageSend","jsxs","style","Paragraph","ReadIcon","SendedIcon","ChatItem","chatId","title","avatar","user","linkToChat","chatAvatar","name","isMessages","time","timeHandler","Link","Avatar","Heading"],"mappings":"ysBAmBA,SAAAA,EAAA,CAAA,SAAAC,EAAA,aAAAC,GAAA,CACE,KAAA,CAAA,EAAAC,GAAAC,IACAC,EAAAC,EAAAC,GAAAA,EAAA,KAAA,KAAA,EAAA,EAEA,GAAAN,EAAA,SAAA,EACE,OAAAO,EAAA,IAAAC,WAAA,CAAA,CAAA,EAGF,MAAAC,EAAAT,EAAAA,EAAA,OAAA,CAAA,EACAU,EAAAC,EAAAF,EAAA,OAAA,EAEA,IAAAG,EAAAH,EAAA,QACA,CAAAC,GAAAD,EAAA,QAAA,OAAA,KAEEG,EADAH,EAAA,QAAA,MAAA,EAAA,EAAA,EACA,OAGF,MAAAI,EAAA,OAAAT,CAAA,IAAA,OAAAK,EAAA,MAAA,EACAK,EAAA,CAAAD,GAAA,OAAAZ,CAAA,EAAA,EAEAc,EAAAF,GAAAJ,EAAA,SAAA,GACAO,EAAAH,GAAAJ,EAAA,SAAA,GAEA,OAAAQ,EAAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,KAAA,SAAA,CAEIX,EAAA,IAAAY,EAAA,CAAA,KAAA,IAAA,MAAA,UAAA,SAAAT,EAAAH,EAAAA,IAAA,IAAA,CAAA,SAAAL,EAAA,YAAA,CAAA,CAAA,EAAAU,EAAA,EAEAE,GAAAP,EAAA,IAAA,MAAA,CAAA,UAAAW,EAAA,KAAA,SAAAX,EAAA,IAAAY,EAAA,CAAA,KAAA,IAAA,MAAA,OAAA,SAAAlB,CAAA,CAAA,EAAA,EAMEc,GAAAR,EAAA,IAAA,MAAA,CAAA,IAAAa,EAAA,IAAA,GAAA,EAE+CJ,GAAAT,EAAA,IAAA,MAAA,CAAA,IAAAc,EAAA,IAAA,GAAA,CACE,CAAA,CAAA,CAGzD,kYCpCA,SAAAC,EAAA,CAAiC,OAAAC,EAC/B,MAAAC,EACA,OAAAC,EACA,KAAAC,EACA,SAAA1B,EACA,aAAAC,CAEF,EAAA,CACE,MAAA0B,EAAA,SAAAJ,CAAA,GAEAK,EAAAH,IAAA,KAAAA,EAAAC,EAAA,OACAG,EAAAL,EAAA,SAAA,EAAAA,EAAA,GAAAE,EAAA,SAAA,IAAAA,EAAA,QAAA,GAGAI,EAAA9B,EAAA,OAAA,EACAS,EAAAqB,GAAA9B,EAAAA,EAAA,OAAA,CAAA,EACA+B,EAAAD,GAAAE,EAAAvB,EAAA,IAAA,EAEA,OAAAQ,EAAA,KAAAgB,EAAA,CAAA,GAAAN,EAAA,UAAAT,EAAA,QAAA,SAAA,CAEIX,EAAA,IAAA2B,EAAC,CAAA,OAAA,GACS,OAAAN,EACA,UAAAC,EACG,KAAA,IACN,OAAAH,EAAA,MACQ,CAAA,EACfT,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,KAAA,SAAA,CAEED,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,MAAA,SAAA,CACEX,EAAA,IAAA4B,EAAA,CAAA,KAAA,IAAA,SAAAN,EAAA,EAAwBC,GAAAvB,EAAAA,IAAAY,EAAA,CAAA,KAAA,IAAA,MAAA,UAAA,SAAAY,EAAA,CAItB,EAAA,EAEJxB,EAAAA,IAAAR,EAAA,CAAA,SAAAC,EAAA,aAAAC,CAAA,CAAA,CACsD,EAAA,CACxD,CAAA,CAAA,CAGN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}